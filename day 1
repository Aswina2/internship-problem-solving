1: 
#include <stdio.h>
void reverseInGroups(int arr[], int n, int k) {
    for (int i = 0; i < n; i += k) {
        int start = i;
        int end = (i + k - 1 < n) ? i + k - 1 : n - 1;
        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }
}
int main() {
    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8};
    int k = 3;
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Original array:\n");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    reverseInGroups(arr, n, k);
    printf("\nArray after reversing every %d elements:\n", k);
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}

2:Find maximum profit
#include <stdio.h>
int maxProfit(int prices[], int n) {
    int profit = 0;
    for (int i = 1; i < n; i++) {
        // If today's price is higher than yesterday's, add the difference
        if (prices[i] > prices[i - 1]) {
            profit += prices[i] - prices[i - 1];
        }
    }

    return profit;
}
int main() {
    int prices[] = {100, 180, 260, 310, 40, 535, 695};
    int n = sizeof(prices) / sizeof(prices[0]);
    int result = maxProfit(prices, n);
    printf("Maximum Profit = %d\n", result);
    return 0;
}


3:Find maximum profit for any num of days
#include <stdio.h>
int maxProfit(int prices[], int n) {
    if (n == 0) return 0;
    int minPrice = prices[0];
    int maxProfit = 0;
    for (int i = 1; i < n; i++) {
        if (prices[i] < minPrice) {
            minPrice = prices[i];
        } else {
            int profit = prices[i] - minPrice;
            if (profit > maxProfit) {
                maxProfit = profit;
            }
        }
    }
    return maxProfit;
}
int main() {
    int prices[] = {7, 1, 5, 3, 6, 4};
    int n = sizeof(prices) / sizeof(prices[0]);
    int profit = maxProfit(prices, n);
    printf("Maximum Profit: %d\n", profit);
return 0;
}


